# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('firefly_dynamic_clustering', ['core', 'applications','wifi'])
    module.source = [
        'model/firefly_dynamic_clustering.cc',
        'model/firefly_dynamic_clustering-header.cc',
        'helper/firefly_dynamic_clustering-helper.cc',
        'helper/ColorHandler.cc',
        'helper/ColorGradientHelper.cc',
        'helper/ReadingsGeneratorHelper.cc',
        'helper/GlobalAnalysis.cc',
        'model/FireflyClusteringLogic.cc'
        ]

    module_test = bld.create_ns3_module_test_library('firefly_dynamic_clustering')
    module_test.source = [
        'test/firefly_dynamic_clustering-test-suite.cc',
        ]

    headers = bld.new_task_gen(features=['ns3header'])
    headers.module = 'firefly_dynamic_clustering'
    headers.source = [
        'model/firefly_dynamic_clustering.h',
        'model/firefly_dynamic_clustering-header.h',
        'helper/firefly_dynamic_clustering-helper.h',
        'helper/ColorHandler.h',
        'helper/ColorGradientHelper.h',
        'helper/ReadingsGeneratorHelper.h',
        'helper/GlobalAnalysis.h',
        'model/FireflyClusteringLogic.h',
        'helper/Constants.h'
        ]

    bld.ns3_python_bindings()
    bld.add_subdirs('examples')

